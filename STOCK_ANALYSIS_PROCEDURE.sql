USE [STOCK_ANALYSIS];  

-- 테이블 생성 프로시저 --
GO
CREATE PROCEDURE CREATE_TBL_STOCK_INFO
AS
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='STOCK_INFO' AND xtype='U')
	DROP TABLE STOCK_INFO
	CREATE TABLE STOCK_INFO ( STOCK_CODE char(10), STOCK_NAME nvarchar(50), STOCK_CATE nvarchar(50))
END
GO


GO  
CREATE PROCEDURE CREATE_TBL_STOCK_CATE 
AS  
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='STOCK_CATEGORY' AND xtype='U')
	DROP TABLE STOCK_CATEGORY
	SELECT ROW_NUMBER() OVER(ORDER BY STOCK_CATE) CATE_ID, STOCK_CATE
	INTO STOCK_CATEGORY
	FROM (SELECT DISTINCT STOCK_CATE FROM STOCK_INFO) INFO
	ORDER BY STOCK_CATE

END
GO

GO 
CREATE PROCEDURE CREATE_TBL_STOCK_PRICE
AS  
BEGIN
	IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='STOCK_PRICE' AND xtype='U') 
	BEGIN
	CREATE TABLE STOCK_PRICE 
	([STOCK_CODE] int, [START] int, [CLOSE] int, [HIGHEST] int, [LOWEST] int, [VOLUME] int, [DATE] date)
	CREATE UNIQUE CLUSTERED INDEX STOCK_PRICE_INDEX
	ON STOCK_PRICE  (STOCK_CODE DESC,[DATE] DESC)
	END
END
GO

GO
CREATE PROCEDURE CREATE_TBL_FINANCE_INFO
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='FINANCE_INFO' AND xtype='U')
	BEGIN
	CREATE TABLE FINANCE_INFO
	([STOCK_CODE] INT, REVENUE FLOAT, PROFIT FLOAT, NET_INCOME FLOAT, ASSETS_SUM FLOAT, DEBT_SUM FLOAT, CAPITAL_SUM FLOAT, 
	OPERATE_CF FLOAT, INVEST_CF FLOAT, FINANCE_CF INT, CAPEX FLOAT, FCF FLOAT, INTEREST_DEPT FLOAT, RESERVE_RATE FLOAT, 
	DIV_RATE FLOAT, TOTAL_STOCK FLOAT, [DATE] date)
	CREATE UNIQUE CLUSTERED INDEX FINANCE_INFO_INDEX
	ON FINANCE_INFO (STOCK_CODE DESC, [DATE] DESC)
	END
END
GO

GO
CREATE PROCEDURE CREATE_TBL_THEME_INFO
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='STOCK_THEME' AND xtype='U')
	BEGIN
	CREATE TABLE STOCK_THEME
	([STOCK_CODE] INT, [THEME_CODE] INT)
	END
	IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='THEME_INFO' AND xtype='U')
	BEGIN
	CREATE TABLE THEME_INFO
	([THEME_CODE] INT, [THEME_NAME] NVARCHAR(50), [THEME_INFO] NVARCHAR(MAX))
	CREATE UNIQUE CLUSTERED INDEX THEME_INFO_INDEX
	ON THEME_INFO (THEME_CODE ASC)
	END
END
GO

-- 테이블 업데이트 프로시저 --
GO  
CREATE PROCEDURE UPDATE_STOCK_PRICE @STOCK_CODE INT, @START INT, @CLOSE INT, @HIGHEST INT, @LOWEST INT, @VOLUME INT, @DATE DATE
AS  
BEGIN
	IF NOT EXISTS (SELECT * FROM STOCK_PRICE WHERE STOCK_CODE = @STOCK_CODE AND [DATE] = @DATE)
	BEGIN
		INSERT INTO STOCK_PRICE ([STOCK_CODE], [START], [CLOSE], [HIGHEST], [LOWEST], [VOLUME], [DATE]) 
		VALUES (@STOCK_CODE, @START, @CLOSE, @HIGHEST, @LOWEST, @VOLUME, @DATE)
		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END
END
GO

GO  
CREATE PROCEDURE UPDATE_FINANCE_INFO 
@STOCK_CODE FLOAT, @REVENUE FLOAT, @PROFIT FLOAT, @NET_INCOME FLOAT, @ASSETS_SUM FLOAT, @DEBT_SUM FLOAT, 
@CAPITAL_SUM FLOAT, @OPERATE_CF FLOAT, @INVEST_CF FLOAT, @FINANCE_CF FLOAT, @CAPEX FLOAT, @FCF FLOAT, 
@INTEREST_DEPT FLOAT, @RESERVE_RATE FLOAT, @DIV_RATE FLOAT, @TOTAL_STOCK FLOAT, @DATE DATE
AS  
BEGIN
	IF NOT EXISTS (SELECT * FROM FINANCE_INFO WHERE STOCK_CODE = @STOCK_CODE AND [DATE] = @DATE)
	BEGIN
		INSERT INTO FINANCE_INFO ([STOCK_CODE], REVENUE, PROFIT, NET_INCOME, ASSETS_SUM, DEBT_SUM, CAPITAL_SUM, OPERATE_CF, INVEST_CF, FINANCE_CF, 
			CAPEX, FCF, INTEREST_DEPT, RESERVE_RATE, DIV_RATE, TOTAL_STOCK, [DATE])
		VALUES (@STOCK_CODE, @REVENUE, @PROFIT, @NET_INCOME, @ASSETS_SUM, @DEBT_SUM, @CAPITAL_SUM, @OPERATE_CF, @INVEST_CF, @FINANCE_CF, 
			@CAPEX, @FCF, @INTEREST_DEPT, @RESERVE_RATE, @DIV_RATE, @TOTAL_STOCK, @DATE)
		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END
END
GO

GO  
CREATE PROCEDURE UPDATE_THEME_INFO @THEME_CODE INT, @THEME_NAME NVARCHAR(50), @THEME_INFO NVARCHAR(MAX) 
AS  
BEGIN
	IF NOT EXISTS (SELECT * FROM THEME_INFO WHERE THEME_CODE = @THEME_CODE)
	BEGIN
		INSERT INTO THEME_INFO (THEME_CODE, THEME_NAME, THEME_INFO)
		VALUES (@THEME_CODE, @THEME_NAME, @THEME_INFO)
		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END
END
GO

GO
CREATE PROCEDURE UPDATE_STOCK_THEME @STOCK_CODE INT, @THEME_CODE INT
AS
BEGIN
	IF NOT EXISTS (SELECT * FROM STOCK_THEME WHERE STOCK_CODE = @STOCK_CODE AND THEME_CODE = @THEME_CODE)
	BEGIN
		INSERT INTO STOCK_THEME (STOCK_CODE, THEME_CODE)
		VALUES (@STOCK_CODE, @THEME_CODE)
		RETURN 0
	END
	ELSE
	BEGIN
		RETURN -1
	END
END
GO

GO
CREATE PROCEDURE UPDATE_STOCK_PRICE_RATIO
AS
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='STOCK_PRICE' AND xtype='U')
	BEGIN
		IF EXISTS (SELECT * FROM sysobjects WHERE name='STOCK_PRICE_RATIO' AND xtype='U')
			DROP TABLE STOCK_PRICE_RATIO
		SELECT *, ([START] + [CLOSE])/2 AVERAGE 
		INTO #STOCK_PRICE_TEMP 
		FROM STOCK_PRICE A
		ORDER BY A.STOCK_CODE, A.[DATE] DESC

		SELECT STOCK_CODE, AVERAGE, HIGHEST, LOWEST, VOLUME, [DATE],
			LEAD(STOCK_CODE) OVER (ORDER BY A.STOCK_CODE, [DATE] DESC) BEF_CODE,
			LEAD(AVERAGE) OVER (ORDER BY A.STOCK_CODE, [DATE] DESC) BEF_AVERAGE
		INTO #STOCK_PRICE_RATIO 
		FROM #STOCK_PRICE_TEMP A 
		ORDER BY A.STOCK_CODE, A.[DATE] DESC
		
		UPDATE #STOCK_PRICE_RATIO SET BEF_AVERAGE = NULL WHERE BEF_CODE <> STOCK_CODE

		SELECT  A.STOCK_CODE, A.AVERAGE, A.HIGHEST, A.LOWEST, A.VOLUME, A.[DATE], 
		CONVERT(FLOAT,A.AVERAGE) / A.BEF_AVERAGE CHANGE_RATIO
		INTO STOCK_PRICE_RATIO
		FROM #STOCK_PRICE_RATIO A
	END
END
GO

-- 파생 테이블 생성 프로시저 --
GO  
CREATE PROCEDURE CREATE_DRV_STOCK_THEME 
AS  
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='DRV_STOCK_THEME' AND xtype='U')
		DROP TABLE DRV_STOCK_THEME

	DECLARE @QUERY VARCHAR(MAX)
	SET @QUERY = '';

	SELECT @QUERY = @QUERY + '[' + STR(THEME_CODE)  + '],'
	FROM (SELECT DISTINCT THEME_CODE FROM STOCK_THEME) A
	ORDER BY THEME_CODE ASC

	SET @QUERY = LEFT(@QUERY, LEN(@QUERY)-1)

	EXEC('SELECT * INTO DRV_STOCK_THEME FROM STOCK_THEME PIVOT(COUNT(THEME_CODE) FOR THEME_CODE IN (' + @QUERY + ')) AS PVT')
END
GO

GO
CREATE PROCEDURE CREATE_DRV_STOCK_PRICE_WEEK
AS  
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='DRV_STOCK_PRICE_WEEK' AND xtype='U')
		DROP TABLE DRV_STOCK_PRICE_WEEK

	SELECT A.STOCK_CODE, 
		AVG((A.[CLOSE] + A.[START])/2) AVERAGE, 
		MAX(A.HIGHEST) HIGHEST, 
		MIN(A.LOWEST) LOWEST, 
		YEAR([DATE]) [YEAR], 
		DATEPART(WEEK, [DATE]) [WEEK],
		SUM(A.VOLUME) [VOLUME],
		MIN([DATE]) [DATE]
	INTO #STOCK_PRICE_WEEK
	FROM STOCK_PRICE A
	GROUP BY STOCK_CODE, DATEPART(WEEK, [DATE]), YEAR([DATE])
	ORDER BY STOCK_CODE, [DATE] DESC

	SELECT *, 
		LEAD([DATE]) OVER (ORDER BY A.STOCK_CODE, [YEAR] DESC, [WEEK] DESC) AS BEF_DATE,
		CONVERT(FLOAT, A.[AVERAGE]) / LEAD([AVERAGE]) OVER (ORDER BY A.STOCK_CODE, [YEAR] DESC, [WEEK] DESC) AS CHANGE_RATIO
	INTO DRV_STOCK_PRICE_WEEK
	FROM #STOCK_PRICE_WEEK A
	ORDER BY A.STOCK_CODE, A.[DATE] DESC

	DELETE FROM DRV_STOCK_PRICE_WEEK WHERE BEF_DATE > [DATE]
	DROP TABLE #STOCK_PRICE_WEEK
END
GO

GO
CREATE PROCEDURE CREATE_DRV_STOCK_PRICE_MONTH
AS
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='DRV_STOCK_PRICE_MONTH' AND xtype='U')
		DROP TABLE DRV_STOCK_PRICE_MONTH

	SELECT A.STOCK_CODE, 
		AVG((A.[CLOSE] + A.[START])/2) AVERAGE, 
		MAX(A.HIGHEST) HIGHEST, 
		MIN(A.LOWEST) LOWEST, 
		YEAR([DATE]) [YEAR], 
		DATEPART(MONTH, [DATE]) [MONTH]
	INTO  #STOCK_PRICE_MONTH
	FROM STOCK_PRICE A
	GROUP BY STOCK_CODE, DATEPART(MONTH, [DATE]), YEAR([DATE])
	ORDER BY STOCK_CODE, [YEAR] DESC, [MONTH] DESC 

	SELECT *, 
		LEAD([YEAR]) OVER (ORDER BY A.STOCK_CODE, [YEAR] DESC, [MONTH] DESC) AS BEF_YEAR,
		LEAD([MONTH]) OVER (ORDER BY A.STOCK_CODE, [YEAR] DESC, [MONTH] DESC) AS BEF_MONTH,
		A.[AVERAGE] / LEAD([AVERAGE]) OVER (ORDER BY A.STOCK_CODE, [YEAR] DESC, [MONTH] DESC) AS CHANGE_RATE
	INTO DRV_STOCK_PRICE_MONTH
	FROM #STOCK_PRICE_MONTH A
	ORDER BY A.STOCK_CODE, A.[YEAR] DESC, A.[MONTH] DESC
	
	DELETE FROM DRV_STOCK_PRICE_MONTH WHERE BEF_YEAR > [YEAR]
	DROP TABLE #STOCK_PRICE_MONTH
END
GO

GO
CREATE PROCEDURE CONV_FINANCE_INFO
AS
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='CVT_FINANCE_INFO_WEEK' AND xtype='U')
		DROP TABLE CVT_FINANCE_INFO_WEEK
	IF EXISTS (SELECT * FROM sysobjects WHERE name='CVT_FINANCE_INFO_MONTH' AND xtype='U')
		DROP TABLE CVT_FINANCE_INFO_MONTH

	SELECT * 
	FROM FINANCE_INFO A WHERE TOTAL_STOCK = 0 

	-- 일부 재무제표의 경우 하드코딩 필요
	UPDATE FINANCE_INFO SET TOTAL_STOCK = 84000000 WHERE STOCK_CODE = 041190 AND [DATE] = '2019-09-01'
	UPDATE FINANCE_INFO SET TOTAL_STOCK = 33873125 WHERE STOCK_CODE = 303030 AND [DATE] = '2019-09-01'
	UPDATE FINANCE_INFO SET TOTAL_STOCK = 22353873 WHERE STOCK_CODE = 042370 AND [DATE] = '2019-09-01'
	UPDATE FINANCE_INFO SET TOTAL_STOCK = 55725992 WHERE STOCK_CODE = 071050 
	UPDATE FINANCE_INFO SET TOTAL_STOCK = 31154798 WHERE STOCK_CODE = 093240 
	UPDATE FINANCE_INFO SET TOTAL_STOCK = 140224314 WHERE STOCK_CODE = 138040 

	-- 재무제표가 5개 아래로 나오는 것들은 스팩주이거나 데이터 정보가 부족하므로 제외한다 (30건 미만)
	SELECT * 
	INTO #FINANCE_INFO_5Q
	FROM FINANCE_INFO 
	WHERE STOCK_CODE IN (
		SELECT STOCK_CODE 
		FROM FINANCE_INFO A 
		GROUP BY STOCK_CODE 
		HAVING COUNT(*) > 4 )
	
	-- 결측치가 있는 데이터 확인(자산 부채 자본 모두 0인경우 오류 데이터로 처리)
	SELECT * FROM #FINANCE_INFO_5Q
	WHERE STOCK_CODE IN (
		SELECT STOCK_CODE
		FROM #FINANCE_INFO_5Q
		WHERE ASSETS_SUM = 0 AND DEBT_SUM = 0 AND CAPITAL_SUM = 0
		GROUP BY STOCK_CODE)

END
GO

GO
CREATE PROCEDURE CREATE_DRV_FINANCE_RATIO
AS
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='STOCK_TRAINING_SET' AND xtype='U')
		DROP TABLE STOCK_TRAINING_SET

	SELECT *, DATEADD(MONTH, 3, [DATE]) NXT_QUARTER
	INTO #FINANCE_TEMP
	FROM FINANCE_INFO A 

	SELECT B.STOCK_CODE, B.AVERAGE, B.HIGHEST, B.LOWEST, B.VOLUME, B.CHANGE_RATIO,
		C.LOWEST WEEK_MIN, C.HIGHEST WEEK_MAX, C.AVERAGE WEEK_AVG,
		CONVERT(FLOAT, (C.AVERAGE - C.LOWEST))/NULLIF((C.HIGHEST - C.LOWEST),0) WEEK_RATIO,
		B.AVERAGE * A.TOTAL_STOCK MARKET_CAP, 
		B.AVERAGE * CONVERT(FLOAT, B.VOLUME) TRADING_VAL,  
		A.ASSETS_SUM, A.CAPITAL_SUM, A.DEBT_SUM,
		A.OPERATE_CF, A.INVEST_CF, A.FINANCE_CF,
		A.CAPEX, A.FCF, 
		A.INTEREST_DEPT, A.RESERVE_RATE,
		A.REVENUE, A.NET_INCOME, A.PROFIT, 
		A.DIV_RATE, A.TOTAL_STOCK, 
		B.[DATE]
	INTO #FINANCE_TEMP2
	FROM #FINANCE_TEMP A 
	JOIN STOCK_PRICE_RATIO B ON A.STOCK_CODE = B.STOCK_CODE AND B.[DATE] BETWEEN A.[DATE] AND A.NXT_QUARTER 
	JOIN DRV_STOCK_PRICE_WEEK C ON B.STOCK_CODE = C.STOCK_CODE AND DATEPART(WEEK, B.[DATE]) = C.[WEEK]
	ORDER BY B.STOCK_CODE ASC, B.[DATE] DESC

	SELECT A.STOCK_CODE,
		A.AVERAGE,
		A.HIGHEST,
		A.LOWEST,
		A.VOLUME,
		A.CHANGE_RATIO,
		A.MARKET_CAP,
		A.MARKET_CAP / NULLIF(A.ASSETS_SUM, 0) PBR, 
		A.MARKET_CAP / NULLIF(A.CAPITAL_SUM, 0) PBR2,
		A.MARKET_CAP / NULLIF(A.DEBT_SUM, 0) PDR,
		A.MARKET_CAP / NULLIF(A.PROFIT , 0) PER, 
		A.MARKET_CAP / NULLIF(A.OPERATE_CF, 0) PCR_OP, 
		A.MARKET_CAP / NULLIF(A.INVEST_CF,0) PCR_IV,
		A.MARKET_CAP / NULLIF(A.FINANCE_CF,0) PCR_FI,
		A.MARKET_CAP / NULLIF(A.REVENUE , 0) PSR,
		A.MARKET_CAP / NULLIF(A.FCF, 0) PFR,
		A.MARKET_CAP / NULLIF(A.CAPEX, 0) PXR,
		A.PROFIT / NULLIF(A.CAPITAL_SUM, 0) ROE,
		A.PROFIT / NULLIF(A.ASSETS_SUM, 0) ROA,
		RANK() OVER (PARTITION BY A.[DATE] ORDER BY MARKET_CAP DESC) MARKET_RANK,
		A.[DATE]
	INTO STOCK_TRAINING_SET
	FROM #FINANCE_TEMP2 A
	ORDER BY A.STOCK_CODE, A.[DATE] DESC

	-- 거래정지로 인한 변동률 제외 처리
	DELETE FROM STOCK_TRAINING_SET WHERE CHANGE_RATIO > 1.3 OR CHANGE_RATIO < 0.7

	-- 재무제표에서 NULL값인 경우는 DIV/0 이므로 해당 종목의 값중 MAX값으로 입력
	UPDATE STOCK_TRAINING_SET SET PBR = (SELECT MAX(PBR) FROM STOCK_TRAINING_SET) WHERE PBR IS NULL
	UPDATE STOCK_TRAINING_SET SET PBR2 = (SELECT MAX(PBR2) FROM STOCK_TRAINING_SET)WHERE PBR2 IS NULL
	UPDATE STOCK_TRAINING_SET SET PDR = (SELECT MAX(PDR) FROM STOCK_TRAINING_SET) WHERE PDR IS NULL
	UPDATE STOCK_TRAINING_SET SET PER = (SELECT MAX(PER) FROM STOCK_TRAINING_SET) WHERE PER IS NULL
	UPDATE STOCK_TRAINING_SET SET PCR_OP = (SELECT MAX(PCR_OP) FROM STOCK_TRAINING_SET) WHERE PCR_OP IS NULL
	UPDATE STOCK_TRAINING_SET SET PCR_IV = (SELECT MAX(PCR_IV) FROM STOCK_TRAINING_SET) WHERE PCR_IV IS NULL
	UPDATE STOCK_TRAINING_SET SET PCR_FI = (SELECT MAX(PCR_FI) FROM STOCK_TRAINING_SET) WHERE PCR_FI IS NULL
	UPDATE STOCK_TRAINING_SET SET PSR = (SELECT MAX(PSR) FROM STOCK_TRAINING_SET) WHERE PSR IS NULL
	UPDATE STOCK_TRAINING_SET SET PFR = (SELECT MAX(PFR) FROM STOCK_TRAINING_SET) WHERE PFR IS NULL
	UPDATE STOCK_TRAINING_SET SET PXR = (SELECT MAX(PXR) FROM STOCK_TRAINING_SET) WHERE PXR IS NULL
	UPDATE STOCK_TRAINING_SET SET ROE = (SELECT MAX(ROE) FROM STOCK_TRAINING_SET) WHERE ROE IS NULL
	UPDATE STOCK_TRAINING_SET SET ROA = (SELECT MAX(ROA) FROM STOCK_TRAINING_SET) WHERE ROA IS NULL

	DROP TABLE #FINANCE_TEMP
	DROP TABLE #FINANCE_TEMP2
END
GO

GO
CREATE PROCEDURE CREATE_DRV_WEEK_FINANCE_RATIO
AS
BEGIN
	IF EXISTS (SELECT * FROM sysobjects WHERE name='STOCK_TRAINING_SET_WEEK' AND xtype='U')
		DROP TABLE STOCK_TRAINING_SET_WEEK

	SELECT *, DATEADD(MONTH, 3, [DATE]) NXT_QUARTER
	INTO #FINANCE_TEMP
	FROM FINANCE_INFO A 

	SELECT B.STOCK_CODE, B.AVERAGE, B.HIGHEST, B.LOWEST, B.VOLUME, B.CHANGE_RATIO,
		B.AVERAGE * A.TOTAL_STOCK MARKET_CAP, 
		B.AVERAGE * CONVERT(FLOAT, B.VOLUME) TRADING_VAL,  
		A.ASSETS_SUM, A.CAPITAL_SUM, A.DEBT_SUM,
		A.OPERATE_CF, A.INVEST_CF, A.FINANCE_CF,
		A.CAPEX, A.FCF, 
		A.INTEREST_DEPT, A.RESERVE_RATE,
		A.REVENUE, A.NET_INCOME, A.PROFIT, 
		A.DIV_RATE, A.TOTAL_STOCK, 
		B.[DATE]
	INTO #FINANCE_TEMP2
	FROM #FINANCE_TEMP A 
	JOIN DRV_STOCK_PRICE_WEEK B ON A.STOCK_CODE = B.STOCK_CODE AND B.[DATE] BETWEEN A.[DATE] AND A.NXT_QUARTER 
	ORDER BY B.STOCK_CODE ASC, B.[DATE] DESC

	SELECT A.STOCK_CODE,
		A.AVERAGE,
		A.HIGHEST,
		A.LOWEST,
		A.VOLUME,
		A.CHANGE_RATIO,
		A.MARKET_CAP,
		A.MARKET_CAP / NULLIF(A.ASSETS_SUM, 0) PBR, 
		A.MARKET_CAP / NULLIF(A.CAPITAL_SUM, 0) PBR2,
		A.MARKET_CAP / NULLIF(A.DEBT_SUM, 0) PDR,
		A.MARKET_CAP / NULLIF(A.PROFIT , 0) PER, 
		A.MARKET_CAP / NULLIF(A.OPERATE_CF, 0) PCR_OP, 
		A.MARKET_CAP / NULLIF(A.INVEST_CF,0) PCR_IV,
		A.MARKET_CAP / NULLIF(A.FINANCE_CF,0) PCR_FI,
		A.MARKET_CAP / NULLIF(A.REVENUE , 0) PSR,
		A.MARKET_CAP / NULLIF(A.FCF, 0) PFR,
		A.MARKET_CAP / NULLIF(A.CAPEX, 0) PXR,
		A.PROFIT / NULLIF(A.CAPITAL_SUM, 0) ROE,
		A.PROFIT / NULLIF(A.ASSETS_SUM, 0) ROA,
		RANK() OVER (PARTITION BY A.[DATE] ORDER BY MARKET_CAP DESC) MARKET_RANK,
		A.[DATE]
	INTO STOCK_TRAINING_SET_WEEK
	FROM #FINANCE_TEMP2 A
	ORDER BY A.STOCK_CODE, A.[DATE] DESC

	-- 거래정지로 인한 변동률 제외 처리
	DELETE FROM STOCK_TRAINING_SET_WEEK WHERE CHANGE_RATIO > 1.3 OR CHANGE_RATIO < 0.7

	-- 재무제표에서 NULL값인 경우는 DIV/0 이므로 해당 종목의 값중 MAX값으로 입력
	UPDATE STOCK_TRAINING_SET_WEEK SET PBR = (SELECT MAX(PBR) FROM STOCK_TRAINING_SET_WEEK) WHERE PBR IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PBR2 = (SELECT MAX(PBR2) FROM STOCK_TRAINING_SET_WEEK)WHERE PBR2 IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PDR = (SELECT MAX(PDR) FROM STOCK_TRAINING_SET_WEEK) WHERE PDR IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PER = (SELECT MAX(PER) FROM STOCK_TRAINING_SET_WEEK) WHERE PER IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PCR_OP = (SELECT MAX(PCR_OP) FROM STOCK_TRAINING_SET_WEEK) WHERE PCR_OP IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PCR_IV = (SELECT MAX(PCR_IV) FROM STOCK_TRAINING_SET_WEEK) WHERE PCR_IV IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PCR_FI = (SELECT MAX(PCR_FI) FROM STOCK_TRAINING_SET_WEEK) WHERE PCR_FI IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PSR = (SELECT MAX(PSR) FROM STOCK_TRAINING_SET_WEEK) WHERE PSR IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PFR = (SELECT MAX(PFR) FROM STOCK_TRAINING_SET_WEEK) WHERE PFR IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET PXR = (SELECT MAX(PXR) FROM STOCK_TRAINING_SET_WEEK) WHERE PXR IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET ROE = (SELECT MAX(ROE) FROM STOCK_TRAINING_SET_WEEK) WHERE ROE IS NULL
	UPDATE STOCK_TRAINING_SET_WEEK SET ROA = (SELECT MAX(ROA) FROM STOCK_TRAINING_SET_WEEK) WHERE ROA IS NULL

	-- SELECT * FROM STOCK_TRAINING_SET_WEEK ORDER BY STOCK_CODE

	DROP TABLE #FINANCE_TEMP
	DROP TABLE #FINANCE_TEMP2
END
GO

-- 데이터 로드 SP
GO
CREATE PROCEDURE SEL_STOCK_PRICE @STOCK_CODE INT
AS
BEGIN
   SELECT  
      [AVERAGE]
      ,[HIGHEST]
      ,[LOWEST]
      ,[VOLUME]
      ,[DATE]
	  ,[CHANGE_RATIO]
   FROM [STOCK_ANALYSIS].[dbo].[STOCK_PRICE_RATIO]
   WHERE STOCK_CODE = @STOCK_CODE
   ORDER BY DATE
END

GO
CREATE PROCEDURE SEL_STOCK_TRAINING_DATA @STOCK_CODE INT
AS
BEGIN
	SELECT A.STOCK_CODE, A.AVERAGE, A.HIGHEST, A.LOWEST, A.VOLUME, A.CHANGE_RATIO, A.MARKET_CAP,
		A.PBR, A.PBR2, A.PDR, A.PER, A.PCR_OP, A.PCR_IV, A.PCR_FI, A.PSR, A.PFR, A.PXR, A.ROE, A.ROA, A.MARKET_RANK, A.[DATE]
	FROM [STOCK_ANALYSIS].[dbo].[STOCK_TRAINING_SET] A
    WHERE STOCK_CODE = @STOCK_CODE
    ORDER BY DATE
END

GO
CREATE PROCEDURE SEL_STOCK_TRAINING_DATA_WEEK @STOCK_CODE INT
AS
BEGIN
	SELECT A.STOCK_CODE, A.AVERAGE, A.HIGHEST, A.LOWEST, A.VOLUME, A.CHANGE_RATIO, A.MARKET_CAP,
		A.PBR, A.PBR2, A.PDR, A.PER, A.PCR_OP, A.PCR_IV, A.PCR_FI, A.PSR, A.PFR, A.PXR, A.ROE, A.ROA, A.MARKET_RANK, A.[DATE]
	FROM [STOCK_ANALYSIS].[dbo].[STOCK_TRAINING_SET_WEEK] A
    WHERE STOCK_CODE = @STOCK_CODE
    ORDER BY DATE
END

-- 테스트 코드 --

SELECT * FROM STOCK_TRAINING_SET WHERE CHANGE_RATIO IS NULL


EXEC CREATE_DRV_STOCK_PRICE_WEEK
EXEC CREATE_DRV_STOCK_PRICE_MONTH
DROP TABLE FINANCE_INFO
DROP INDEX FINANCE_INFO_INDEX ON FINANCE_INFO
DROP PROCEDURE CREATE_DRV_STOCK_PRICE_WEEK
DROP PROCEDURE CREATE_DRV_STOCK_PRICE_MONTH

DROP TABLE THEME_INFO
DROP TABLE STOCK_THEME
DROP PROCEDURE CREATE_TBL_THEME_INFO
UPDATE_THEME_INFO
UPDATE_STOCK_THEME 1,2
STOCK_INFO
UPDATE_THEME_INFO 0, '자동차 대표주', '자동차 종합생산 메이커 및 대형 모듈 부품업체. 국제 자동차산업 동향, 경기활성화 여부, 환율 동향, 유가 동향 등에 민감한 종목군임. 일반적으로 경기가 호황기를 보일 경우, 원/달러 환율이 상승할 경우, 유가가 하락할 경우에 실적개선 기대감이 커지는 경향이 있음. 고용효과와 국민경제 파급효과가 큰 산업임.'